// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestAPI.Data;

#nullable disable

namespace RestAPI.Migrations
{
    [DbContext(typeof(UAppContext))]
    [Migration("20240311143727_AssigmentSolutionMgt")]
    partial class AssigmentSolutionMgt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LecturesForSubject", b =>
                {
                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.HasKey("LectureId", "SubjectId")
                        .HasName("PK__Lectures__2DF84CA73B42459B");

                    b.HasIndex("SubjectId");

                    b.ToTable("LecturesForSubject", (string)null);
                });

            modelBuilder.Entity("LectureSubject", b =>
                {
                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("LectureId", "SubjectId");

                    b.ToTable("LectureSubject");
                });

            modelBuilder.Entity("PermissionGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("PermissionId", "UserGroupId")
                        .HasName("PK__Permissi__F0035D1187F416D6");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Permission_Group", (string)null);
                });

            modelBuilder.Entity("PermissionUserGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UserGroupId");

                    b.ToTable("PermissionUserGroup");
                });

            modelBuilder.Entity("RestAPI.Models.AssessmentCriterion", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriteriaId"), 1L, 1);

                    b.Property<decimal>("MaxGrade")
                        .HasColumnType("decimal(2,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.HasKey("CriteriaId")
                        .HasName("PK__Assessme__FE6ADB2DDE29B53E");

                    b.HasIndex("TeacherId");

                    b.ToTable("AssessmentCriteria");
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssignmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<decimal>("MaxGrade")
                        .HasColumnType("decimal(2,2)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("Qfile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("QFile");

                    b.Property<string>("Qtext")
                        .HasColumnType("text")
                        .HasColumnName("QText");

                    b.Property<string>("Qtitle")
                        .HasColumnType("text")
                        .HasColumnName("QTitle");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("AssignmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("RestAPI.Models.AssignmentSolution", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("AssignmentID");

                    b.Property<byte[]>("Afile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AFile");

                    b.Property<string>("Anote")
                        .HasColumnType("text")
                        .HasColumnName("ANote");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("StudentId", "AssignmentId")
                        .HasName("PK__Assignme__51E1B39C8E0034DB");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSolutions");
                });

            modelBuilder.Entity("RestAPI.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttendanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.HasKey("AttendanceId");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("RestAPI.Models.College", b =>
                {
                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollegeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CollegeId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("RestAPI.Models.CriteriaForSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("SubjectId", "CriteriaId", "YearId")
                        .HasName("PK__Criteria__CF3E342244FF46B1");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("YearId");

                    b.ToTable("CriteriaForSubjects");
                });

            modelBuilder.Entity("RestAPI.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("GradeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("RestAPI.Models.GradeAndCriterion", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("GradeId", "CriteriaId")
                        .HasName("PK__GradeAnd__9B1ED785078FCEA8");

                    b.HasIndex("CriteriaId");

                    b.ToTable("GradeAndCriteria");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParentGroupID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("GroupId");

                    b.HasIndex("LevelId");

                    b.HasIndex("MajorId");

                    b.HasIndex("YearId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RestAPI.Models.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LectureId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("RestAPI.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"), 1L, 1);

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("CollegeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MajorId");

                    b.HasIndex("CollegeId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("RestAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RestAPI.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("RestAPI.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.HasIndex(new[] { "IdNumber" }, "UQ__Students__62DF8033EB9C3711")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RestAPI.Models.StudentSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<byte[]>("Sfile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SFile");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__StudentS__9C8A5B69A311BE0E");

                    b.HasIndex("GroupId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("StudentSchedule");
                });

            modelBuilder.Entity("RestAPI.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("RestAPI.Models.SubjectInLevel", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("CollegeID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.HasKey("SubjectId", "LevelId", "CollegeId", "MajorId", "TermId")
                        .HasName("PK__SubjectI__11E4FA5C264D528A");

                    b.HasIndex("CollegeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("MajorId");

                    b.HasIndex("TermId");

                    b.ToTable("SubjectInLevel");
                });

            modelBuilder.Entity("RestAPI.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TeacherId");

                    b.HasIndex(new[] { "IdNumber" }, "UQ__Teachers__62DF8033E4024964")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Teachers__A9D10534EF942E65")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("RestAPI.Models.TeacherSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Sfile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SFile");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__TeacherS__9C8A5B695414ABED");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("TeacherSchedule");
                });

            modelBuilder.Entity("RestAPI.Models.Teaching", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.HasKey("TeacherId", "GroupId", "SubjectId", "MajorId", "YearId", "TermId")
                        .HasName("PK__Teaching__945231760E2B4305");

                    b.HasIndex("GroupId");

                    b.HasIndex("MajorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("Teaching");
                });

            modelBuilder.Entity("RestAPI.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TermId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("RestAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Functional")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("UserId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534F7D318DC")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RestAPI.Models.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserGroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("RestAPI.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Year1")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("YearId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("LecturesForSubject", b =>
                {
                    b.HasOne("RestAPI.Models.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__LecturesF__Lectu__45F365D3");

                    b.HasOne("RestAPI.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__LecturesF__Subje__46E78A0C");
                });

            modelBuilder.Entity("PermissionGroup", b =>
                {
                    b.HasOne("RestAPI.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK__Permissio__Permi__49C3F6B7");

                    b.HasOne("RestAPI.Models.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Permissio__UserG__4AB81AF0");
                });

            modelBuilder.Entity("RestAPI.Models.AssessmentCriterion", b =>
                {
                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("AssessmentCriteria")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Assessmen__Teach__3E52440B");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Subje__3B75D760");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Teach__398D8EEE");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Assignments")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__YearI__3A81B327");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.AssignmentSolution", b =>
                {
                    b.HasOne("RestAPI.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSolutions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Assig__7A672E12");

                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("AssignmentSolutions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Stude__797309D9");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RestAPI.Models.Attendance", b =>
                {
                    b.HasOne("RestAPI.Models.Lecture", "Lecture")
                        .WithMany("Attendances")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Lectu__693CA210");

                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Stude__6754599E");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Attendances")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Subje__68487DD7");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("Attendances")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__TermI__6A30C649");

                    b.Navigation("Lecture");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("RestAPI.Models.CriteriaForSubject", b =>
                {
                    b.HasOne("RestAPI.Models.AssessmentCriterion", "Criteria")
                        .WithMany("CriteriaForSubjects")
                        .HasForeignKey("CriteriaId")
                        .IsRequired()
                        .HasConstraintName("FK__CriteriaF__Crite__5535A963");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("CriteriaForSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__CriteriaF__Subje__5441852A");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("CriteriaForSubjects")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__CriteriaF__YearI__5629CD9C");

                    b.Navigation("Criteria");

                    b.Navigation("Subject");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Grade", b =>
                {
                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__StudentI__7E37BEF6");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__SubjectI__7D439ABD");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__TeacherI__7F2BE32F");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("Grades")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__TermID__01142BA1");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Grades")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__YearID__00200768");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.GradeAndCriterion", b =>
                {
                    b.HasOne("RestAPI.Models.AssessmentCriterion", "Criteria")
                        .WithMany("GradeAndCriteria")
                        .HasForeignKey("CriteriaId")
                        .IsRequired()
                        .HasConstraintName("FK__GradeAndC__Crite__04E4BC85");

                    b.HasOne("RestAPI.Models.Grade", "GradeNavigation")
                        .WithMany("GradeAndCriteria")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK__GradeAndC__Grade__03F0984C");

                    b.Navigation("Criteria");

                    b.Navigation("GradeNavigation");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.HasOne("RestAPI.Models.Level", "Level")
                        .WithMany("Groups")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__LevelID__5DCAEF64");

                    b.HasOne("RestAPI.Models.Major", "Major")
                        .WithMany("Groups")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__MajorID__5EBF139D");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Groups")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__YearID__5CD6CB2B");

                    b.Navigation("Level");

                    b.Navigation("Major");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.HasOne("RestAPI.Models.College", "College")
                        .WithMany("Majors")
                        .HasForeignKey("CollegeId")
                        .IsRequired()
                        .HasConstraintName("FK__Majors__CollegeI__2F10007B");

                    b.Navigation("College");
                });

            modelBuilder.Entity("RestAPI.Models.Notification", b =>
                {
                    b.HasOne("RestAPI.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Notif__0B91BA14");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Students__GroupI__6383C8BA");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RestAPI.Models.StudentSchedule", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__Group__6EF57B66");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__TermI__6E01572D");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__YearI__6D0D32F4");

                    b.Navigation("Group");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.SubjectInLevel", b =>
                {
                    b.HasOne("RestAPI.Models.College", "College")
                        .WithMany("SubjectInLevels")
                        .HasForeignKey("CollegeId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectIn__Colle__4F7CD00D");

                    b.HasOne("RestAPI.Models.Level", "Level")
                        .WithMany("SubjectInLevels")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectIn__Level__4E88ABD4");

                    b.HasOne("RestAPI.Models.Major", "Major")
                        .WithMany("SubjectInLevels")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectIn__Major__5070F446");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("SubjectInLevels")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectIn__Subje__4D94879B");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("SubjectInLevels")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectIn__TermI__5165187F");

                    b.Navigation("College");

                    b.Navigation("Level");

                    b.Navigation("Major");

                    b.Navigation("Subject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("RestAPI.Models.TeacherSchedule", b =>
                {
                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__Teach__412EB0B6");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__TermI__4222D4EF");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__YearI__4316F928");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Teaching", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Teachings")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__GroupI__72C60C4A");

                    b.HasOne("RestAPI.Models.Major", "Major")
                        .WithMany("Teachings")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__MajorI__74AE54BC");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Teachings")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__Subjec__73BA3083");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Teachings")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__Teache__71D1E811");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("Teachings")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__TermID__76969D2E");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Teachings")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__YearID__75A278F5");

                    b.Navigation("Group");

                    b.Navigation("Major");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.User", b =>
                {
                    b.HasOne("RestAPI.Models.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__UserGroup__59FA5E80");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("RestAPI.Models.AssessmentCriterion", b =>
                {
                    b.Navigation("CriteriaForSubjects");

                    b.Navigation("GradeAndCriteria");
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSolutions");
                });

            modelBuilder.Entity("RestAPI.Models.College", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("SubjectInLevels");
                });

            modelBuilder.Entity("RestAPI.Models.Grade", b =>
                {
                    b.Navigation("GradeAndCriteria");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("StudentSchedules");

                    b.Navigation("Students");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Lecture", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("RestAPI.Models.Level", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectInLevels");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectInLevels");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.Navigation("AssignmentSolutions");

                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("RestAPI.Models.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attendances");

                    b.Navigation("CriteriaForSubjects");

                    b.Navigation("Grades");

                    b.Navigation("SubjectInLevels");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Teacher", b =>
                {
                    b.Navigation("AssessmentCriteria");

                    b.Navigation("Assignments");

                    b.Navigation("Grades");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Term", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Grades");

                    b.Navigation("StudentSchedules");

                    b.Navigation("SubjectInLevels");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RestAPI.Models.Year", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CriteriaForSubjects");

                    b.Navigation("Grades");

                    b.Navigation("Groups");

                    b.Navigation("StudentSchedules");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });
#pragma warning restore 612, 618
        }
    }
}
