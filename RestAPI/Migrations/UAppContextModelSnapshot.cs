// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestAPI.Data;

#nullable disable

namespace RestAPI.Migrations
{
    [DbContext(typeof(UAppContext))]
    partial class UAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LecturesForSubject", b =>
                {
                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.HasKey("LectureId", "SubjectId")
                        .HasName("PK__Lectures__2DF84CA73B42459B");

                    b.HasIndex("SubjectId");

                    b.ToTable("LecturesForSubject", (string)null);
                });

            modelBuilder.Entity("LectureSubject", b =>
                {
                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("LectureId", "SubjectId");

                    b.ToTable("LectureSubject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssignmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("Qfile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("QFile");

                    b.Property<string>("Qtext")
                        .HasColumnType("text")
                        .HasColumnName("QText");

                    b.Property<string>("Qtitle")
                        .HasColumnType("text")
                        .HasColumnName("QTitle");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("AssignmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("RestAPI.Models.AssignmentSolution", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("AssignmentID");

                    b.Property<byte[]>("Afile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AFile");

                    b.Property<string>("Anote")
                        .HasColumnType("text")
                        .HasColumnName("ANote");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.HasKey("StudentId", "AssignmentId")
                        .HasName("PK__Assignme__51E1B39C8E0034DB");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSolutions");
                });

            modelBuilder.Entity("RestAPI.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("File");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("AttachmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("RestAPI.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttendanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Rfile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("RFile");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.HasKey("AttendanceId");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("RestAPI.Models.College", b =>
                {
                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollegeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CollegeId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("RestAPI.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("File");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("CourseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("RestAPI.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<double?>("Attendance")
                        .HasColumnType("float");

                    b.Property<double?>("Exam")
                        .HasColumnType("float");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.Property<double?>("participation")
                        .HasColumnType("float");

                    b.HasKey("GradeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParentGroupID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("GroupId");

                    b.HasIndex("LevelId");

                    b.HasIndex("MajorId");

                    b.HasIndex("YearId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RestAPI.Models.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LectureId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("RestAPI.Models.LectureForSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    b.HasKey("SubjectId", "LectureId")
                        .HasName("PK__Lect__CF3E342244FF46B1");

                    b.HasIndex("LectureId");

                    b.ToTable("LecturesForSubjects");
                });

            modelBuilder.Entity("RestAPI.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"), 1L, 1);

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("CollegeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MajorId");

                    b.HasIndex("CollegeId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("RestAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RestAPI.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.HasIndex(new[] { "IdNumber" }, "UQ__Students__62DF8033EB9C3711")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RestAPI.Models.StudentSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<byte[]>("Sfile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SFile");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__StudentS__9C8A5B69A311BE0E");

                    b.HasIndex("GroupId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("StudentSchedule");
                });

            modelBuilder.Entity("RestAPI.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("RestAPI.Models.SubjectsInMajorsLevel", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.HasKey("SubjectId", "MajorId")
                        .HasName("PK__SubjectsInMajorsLevel__CF3E342244FF46B1");

                    b.HasIndex("LevelId");

                    b.HasIndex("MajorId");

                    b.HasIndex("TermId");

                    b.ToTable("SubjectsInMajorsLevel");
                });

            modelBuilder.Entity("RestAPI.Models.SysUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RestAPI.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TeacherId");

                    b.HasIndex(new[] { "IdNumber" }, "UQ__Teachers__62DF8033E4024964")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Teachers__A9D10534EF942E65")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("RestAPI.Models.TeacherSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Sfile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SFile");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__TeacherS__9C8A5B695414ABED");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("TeacherSchedule");
                });

            modelBuilder.Entity("RestAPI.Models.Teaching", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("MajorID");

                    b.Property<int>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    b.Property<int>("TermId")
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    b.HasKey("TeacherId", "GroupId", "SubjectId", "MajorId", "YearId", "TermId")
                        .HasName("PK__Teaching__945231760E2B4305");

                    b.HasIndex("GroupId");

                    b.HasIndex("MajorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.HasIndex("YearId");

                    b.ToTable("Teaching");
                });

            modelBuilder.Entity("RestAPI.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TermID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TermId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("RestAPI.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("YearID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Year1")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("YearId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("LecturesForSubject", b =>
                {
                    b.HasOne("RestAPI.Models.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__LecturesF__Lectu__45F365D3");

                    b.HasOne("RestAPI.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__LecturesF__Subje__46E78A0C");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestAPI.Models.SysUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestAPI.Models.SysUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestAPI.Models.SysUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestAPI.Models.SysUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Subje__3B75D760");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Teach__398D8EEE");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Assignments")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__YearI__3A81B327");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.AssignmentSolution", b =>
                {
                    b.HasOne("RestAPI.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSolutions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Assig__7A672E12");

                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("AssignmentSolutions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Assignmen__Stude__797309D9");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RestAPI.Models.Attachment", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Attachments")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Attachment__Group__3A81B327");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Attachments")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Attachment__Subje__3B75D760");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Attachments")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Attachment__Teach__398D8EEE");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Attachments")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Attachment__YearI__3A81B327");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Attendance", b =>
                {
                    b.HasOne("RestAPI.Models.Lecture", "Lecture")
                        .WithMany("Attendances")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Lectu__693CA210");

                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Stude__6754599E");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Attendances")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__Subje__68487DD7");

                    b.Navigation("Lecture");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("RestAPI.Models.Course", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Course__Group__3A81B327");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Course__Subje__3B75D760");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Course__Teach__398D8EEE");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Courses")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Course__YearI__3A81B327");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Grade", b =>
                {
                    b.HasOne("RestAPI.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__StudentI__7E37BEF6");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__SubjectI__7D439ABD");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__TeacherI__7F2BE32F");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Grades")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Grades__YearID__00200768");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.HasOne("RestAPI.Models.Level", "Level")
                        .WithMany("Groups")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__LevelID__5DCAEF64");

                    b.HasOne("RestAPI.Models.Major", "Major")
                        .WithMany("Groups")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__MajorID__5EBF139D");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Groups")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Groups__YearID__5CD6CB2B");

                    b.Navigation("Level");

                    b.Navigation("Major");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.LectureForSubject", b =>
                {
                    b.HasOne("RestAPI.Models.Lecture", "Lecturee")
                        .WithMany("LectureForSubjects")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__lect__subj__5535A963");

                    b.HasOne("RestAPI.Models.Subject", "Subjectt")
                        .WithMany("LectureForSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__lect__Subje__5441852A");

                    b.Navigation("Lecturee");

                    b.Navigation("Subjectt");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.HasOne("RestAPI.Models.College", "College")
                        .WithMany("Majors")
                        .HasForeignKey("CollegeId")
                        .IsRequired()
                        .HasConstraintName("FK__Majors__CollegeI__2F10007B");

                    b.Navigation("College");
                });

            modelBuilder.Entity("RestAPI.Models.Notification", b =>
                {
                    b.HasOne("RestAPI.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Notif__0B91BA14");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Students__GroupI__6383C8BA");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RestAPI.Models.StudentSchedule", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__Group__6EF57B66");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__TermI__6E01572D");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentSc__YearI__6D0D32F4");

                    b.Navigation("Group");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.SubjectsInMajorsLevel", b =>
                {
                    b.HasOne("RestAPI.Models.Level", "Levell")
                        .WithMany("SubjectsInMajorsLevels")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectsInMajorsLevel__5333352A");

                    b.HasOne("RestAPI.Models.Major", "Majorr")
                        .WithMany("SubjectsInMajorsLevels")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectsInMajorsLevel__5535A963");

                    b.HasOne("RestAPI.Models.Subject", "Subjectt")
                        .WithMany("SubjectsInMajorsLevels")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__SubjectsInMajorsLevel__5441852A");

                    b.HasOne("RestAPI.Models.Term", "Termm")
                        .WithMany("SubjectsInMajorsLevels")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levell");

                    b.Navigation("Majorr");

                    b.Navigation("Subjectt");

                    b.Navigation("Termm");
                });

            modelBuilder.Entity("RestAPI.Models.TeacherSchedule", b =>
                {
                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__Teach__412EB0B6");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__TermI__4222D4EF");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("TeacherSchedules")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__TeacherSc__YearI__4316F928");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Teaching", b =>
                {
                    b.HasOne("RestAPI.Models.Group", "Group")
                        .WithMany("Teachings")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__GroupI__72C60C4A");

                    b.HasOne("RestAPI.Models.Major", "Major")
                        .WithMany("Teachings")
                        .HasForeignKey("MajorId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__MajorI__74AE54BC");

                    b.HasOne("RestAPI.Models.Subject", "Subject")
                        .WithMany("Teachings")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__Subjec__73BA3083");

                    b.HasOne("RestAPI.Models.Teacher", "Teacher")
                        .WithMany("Teachings")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__Teache__71D1E811");

                    b.HasOne("RestAPI.Models.Term", "Term")
                        .WithMany("Teachings")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__TermID__76969D2E");

                    b.HasOne("RestAPI.Models.Year", "Year")
                        .WithMany("Teachings")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaching__YearID__75A278F5");

                    b.Navigation("Group");

                    b.Navigation("Major");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("RestAPI.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSolutions");
                });

            modelBuilder.Entity("RestAPI.Models.College", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("RestAPI.Models.Group", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("Courses");

                    b.Navigation("StudentSchedules");

                    b.Navigation("Students");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Lecture", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("LectureForSubjects");
                });

            modelBuilder.Entity("RestAPI.Models.Level", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectsInMajorsLevels");
                });

            modelBuilder.Entity("RestAPI.Models.Major", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectsInMajorsLevels");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("RestAPI.Models.Student", b =>
                {
                    b.Navigation("AssignmentSolutions");

                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("RestAPI.Models.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("Attendances");

                    b.Navigation("Courses");

                    b.Navigation("Grades");

                    b.Navigation("LectureForSubjects");

                    b.Navigation("SubjectsInMajorsLevels");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Teacher", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("Courses");

                    b.Navigation("Grades");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Term", b =>
                {
                    b.Navigation("StudentSchedules");

                    b.Navigation("SubjectsInMajorsLevels");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("RestAPI.Models.Year", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("Courses");

                    b.Navigation("Grades");

                    b.Navigation("Groups");

                    b.Navigation("StudentSchedules");

                    b.Navigation("TeacherSchedules");

                    b.Navigation("Teachings");
                });
#pragma warning restore 612, 618
        }
    }
}
